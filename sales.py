# -*- coding: utf-8 -*-
"""sales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DRzUM8EuiMhiUirdnOw7chhci94KYA2V
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn

df=pd.read_csv('/content/archive (1).zip')
df.head(2)



#  Product Popularity: Determine the most and least popular products based on quantity sold

product_popularity = df.groupby('Product line')['Quantity'].sum().sort_values(ascending=False)
print("Most Popular Products:")
print(product_popularity.head())

print("\nLeast Popular Products:")
print(product_popularity.tail())

"""## 2. Customer Analysis"""

#  Customer Demographics: Analyze the distribution of customers by type (e.g., new vs. returning), gender, and city.

# Customer type distribution
customer_type_counts = df['Customer type'].value_counts()
plt.figure(figsize=(8, 6))
sns.barplot(x=customer_type_counts.index, y=customer_type_counts.values)
plt.title('Distribution of Customer Types')
plt.xlabel('Customer Type')
plt.ylabel('Count')
plt.show()



# City distribution
city_counts = df['City'].value_counts()
plt.figure(figsize=(10, 6))
sns.barplot(x=city_counts.index, y=city_counts.values)
plt.title('Distribution of Customers by City')
plt.xlabel('City')
plt.ylabel('Count')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

#  Purchase Patterns: Examine purchase frequency and average spending per customer type and gender.

# Purchase frequency by customer type
purchase_frequency_by_type = df.groupby('Customer type')['Invoice ID'].nunique()
plt.figure(figsize=(8, 6))
sns.barplot(x=purchase_frequency_by_type.index, y=purchase_frequency_by_type.values)
plt.title('Purchase Frequency by Customer Type')
plt.xlabel('Customer Type')
plt.ylabel('Number of Purchases')
plt.show()

# Average spending per customer type
df['Total'] = df['Quantity'] * df['Unit price']
average_spending_by_type = df.groupby('Customer type')['Total'].mean()
plt.figure(figsize=(8, 6))
sns.barplot(x=average_spending_by_type.index, y=average_spending_by_type.values)
plt.title('Average Spending per Customer Type')
plt.xlabel('Customer Type')
plt.ylabel('Average Spending')
plt.show()

# Purchase frequency by gender
purchase_frequency_by_gender = df.groupby('Gender')['Invoice ID'].nunique()
plt.figure(figsize=(8, 6))
sns.barplot(x=purchase_frequency_by_gender.index, y=purchase_frequency_by_gender.values)
plt.title('Purchase Frequency by Gender')
plt.xlabel('Gender')
plt.ylabel('Number of Purchases')
plt.show()

# Average spending per gender
average_spending_by_gender = df.groupby('Gender')['Total'].mean()
plt.figure(figsize=(8, 6))
sns.barplot(x=average_spending_by_gender.index, y=average_spending_by_gender.values)
plt.title('Average Spending per Gender')
plt.xlabel('Gender')
plt.ylabel('Average Spending')
plt.show()

#  Customer Satisfaction: Analyze customer ratings to identify satisfaction levels and areas for improvement

# Customer Satisfaction Analysis

# Overall rating distribution
plt.figure(figsize=(8, 6))
sns.histplot(df['Rating'], bins=5, kde=True)
plt.title('Distribution of Customer Ratings')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.show()

# Average rating by customer type
average_rating_by_type = df.groupby('Customer type')['Rating'].mean()
plt.figure(figsize=(8, 6))
sns.barplot(x=average_rating_by_type.index, y=average_rating_by_type.values)
plt.title('Average Rating by Customer Type')
plt.xlabel('Customer Type')
plt.ylabel('Average Rating')
plt.show()

# Average rating by city
average_rating_by_city = df.groupby('City')['Rating'].mean()
plt.figure(figsize=(10, 6))
sns.barplot(x=average_rating_by_city.index, y=average_rating_by_city.values)
plt.title('Average Rating by City')
plt.xlabel('City')
plt.ylabel('Average Rating')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Further analysis could involve:
# - Correlation between rating and other variables (e.g., total spending, product categories)
# - Text analysis of customer reviews (if available) to identify specific areas for improvement

"""**1. Sales Analysis**
 Understand the overall sales performance
"""

#  Sales by Payment Method: Examine the distribution of sales across different payment methods

# Group the data by payment method and calculate the total sales for each method
sales_by_payment_method = df.groupby('Payment')['Total'].sum()

# Create a bar plot to visualize the sales distribution
plt.figure(figsize=(10, 6))
sales_by_payment_method.plot(kind='bar')
plt.title('Sales by Payment Method')
plt.xlabel('Payment Method')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Product Line Performance: Identify top-performing product lines

# Group sales by product line and calculate total revenue
product_line_performance = df.groupby('Product line')['Total'].sum().sort_values(ascending=False)

# Print the top performing product lines
print(product_line_performance)

# Visualize the results
plt.figure(figsize=(10, 6))
sns.barplot(x=product_line_performance.index, y=product_line_performance.values)
plt.title('Product Line Performance')
plt.xlabel('Product Line')
plt.ylabel('Total ')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Branch and City Performance: Analyze sales performance across different branches and cities

# Group sales by branch and city
branch_city_sales = df.groupby(['Branch', 'City'])['Total'].sum().reset_index()

# Visualize sales performance
plt.figure(figsize=(5, 6))
sns.barplot(x='Branch', y='Total', hue='City', data=branch_city_sales)
plt.title('Sales Performance by Branch and City')
plt.xlabel('Branch')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Identify top performing branches and cities
top_branches = branch_city_sales.groupby('Branch')['Total'].sum().sort_values(ascending=False).head()
top_cities = branch_city_sales.groupby('City')['Total'].sum().sort_values(ascending=False).head()

print("Top Performing Branches:\n", top_branches)
print("\nTop Performing Cities:\n", top_cities)

#Calculate the total sales for different time periods (daily, weekly, monthly)

# Extract relevant columns for sales analysis
sales_data = df[['Date', 'Quantity', 'Unit price']]

# Convert 'InvoiceDate' to datetime object
sales_data['Date'] = pd.to_datetime(sales_data['Date'])

# Set 'Date' as index
sales_data.set_index('Date', inplace=True)

# Calculate daily sales
daily_sales = sales_data.resample('D').sum()

# Calculate weekly sales
weekly_sales = sales_data.resample('w').sum()
# Calculate monthly sales
monthly_sales = sales_data.resample('M').sum()

print("Daily Sales:\n", daily_sales.head())


print("\nWeekly Sales:\n", weekly_sales.head())



print("\nMonthly Sales:\n", monthly_sales.head())

# prompt: conect to drive

from google.colab import drive
drive.mount('/content/drive')

!apt-get install texlive texlive-xetex texlive-latex-extra pandoc
!jupyter nbconvert --to pdf /content/drive/MyDrive/sales.ipynb

from google.colab import files
files.download('/content/drive/MyDrive/sales.pdf')